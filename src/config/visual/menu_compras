import tkinter as tk
from tkinter import ttk
from models.auto_model import AutoModel  # Aseg√∫rate de tener esta clase definida

def cargar_autos(tree):
    tree.delete(*tree.get_children())  # Limpiar la tabla

    # Conexi√≥n a la base de datos
    modelo = AutoModel()
    resultado = modelo.get_compras()  # Obt√©n los autos de la base de datos

    if resultado["status"] != "success":
        print(f"‚ùå Error al obtener autos: {resultado['message']}")
        return

    # Verifica si los autos est√°n en 'data'
    if "data" not in resultado:
        print("‚ùå No se encontr√≥ la clave 'data' en la respuesta")
        return

    # Verifica el contenido de los datos obtenidos
    print(f"‚úÖ Datos obtenidos: {resultado['data']}")

    for auto in resultado["data"]:
        try:
            print(f"üì¶ Auto le√≠do: {auto}")

            # Insertar los datos en el Treeview
            tree.insert("", "end", values=(
                auto[0],  # ID
                auto[1],  # Estado
                auto[2],  # Marca
                auto[3],  # Cilindros
                auto[4],  # A√±o
                f"${float(auto[5]):,.2f}"  # Precio formateado
            ))
        except Exception as e:
            print(f"‚ùå Error al cargar auto: {e}")

def comprar_auto(tree):
    selected_item = tree.selection()  # Obtener el auto seleccionado
    if not selected_item:
        print("‚ùå No has seleccionado un auto.")
        return

    item = tree.item(selected_item)
    auto_id = item['values'][0]  # Obtener el ID del auto seleccionado
    print(f"üöó Comprando auto con ID: {auto_id}")

    # Aqu√≠ podr√≠as implementar la l√≥gica de compra, como cambiar el estado del auto en la base de datos
    modelo = AutoModel()
    resultado = modelo.comprar_auto(auto_id)

    if resultado["status"] == "success":
        print(f"‚úÖ Auto con ID {auto_id} comprado correctamente.")
        cargar_autos(tree)  # Recargar los autos despu√©s de la compra
    else:
        print(f"‚ùå Error al comprar el auto: {resultado['message']}")

def ventana_compras():
    ventana = tk.Toplevel()
    ventana.title("üõí M√≥dulo de Compras")
    ventana.geometry("1000x500")

    # Crear el Treeview para mostrar los autos
    tree = ttk.Treeview(ventana, columns=("ID", "Estado", "Marca", "Cilindros", "A√±o", "Precio"), show="headings")
    tree.heading("ID", text="ID")
    tree.heading("Estado", text="Estado")
    tree.heading("Marca", text="Marca")
    tree.heading("Cilindros", text="Cilindros")
    tree.heading("A√±o", text="A√±o")
    tree.heading("Precio", text="Precio")

    # Configurar el ancho de las columnas
    tree.column("ID", width=50)
    tree.column("Estado", width=100)
    tree.column("Marca", width=150)
    tree.column("Cilindros", width=80)
    tree.column("A√±o", width=80)
    tree.column("Precio", width=100)

    tree.pack(pady=20, fill="both", expand=True)

    # Bot√≥n para recargar los datos
    btn_actualizar = tk.Button(ventana, text="üîÑ Recargar", command=lambda: cargar_autos(tree))
    btn_actualizar.pack(pady=10)

    # Bot√≥n para comprar el auto seleccionado
    btn_comprar = tk.Button(ventana, text="Comprar Auto", command=lambda: comprar_auto(tree))
    btn_comprar.pack(pady=10)

    # Cargar los autos por primera vez
    cargar_autos(tree)
